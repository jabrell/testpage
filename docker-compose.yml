services:
  traefik:
    image: traefik:v2.9
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--entrypoints.web.address=:80"
    ports:
      - "80:80"
      - "8080:8080" # Traefik dashboard
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    networks:
      - my_network

  postgres_db:
    image: postgres:latest
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
    networks:
      - my_network
    env_file:
      - .env
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD?Variable not set}
      - POSTGRES_USER=${POSTGRES_USER?Variable not set}
      - POSTGRES_DB=${POSTGRES_DB?Variable not set}
    ports:
      - "${POSTGRES_PORT_MAPPED}:5432"
    #volumes:
    #  - postgres_data:/var/lib/postgresql/data

  prestart:
    image: "${DOCKER_IMAGE_BACKEND?Variable not set}:${TAG-latest}"
    build:
      context: ./backend
    depends_on:
      postgres_db:
        condition: service_healthy
    networks:
      - my_network
    command: bash scripts/prestart.sh
    env_file:
      - .env
    environment:
      - ENVIRONMENT=${ENVIRONMENT}
      - SECRET_KEY=${SECRET_KEY?Variable not set}
      - FIRST_SUPERUSER=${FIRST_SUPERUSER?Variable not set}
      - FIRST_SUPERUSER_PASSWORD=${FIRST_SUPERUSER_PASSWORD?Variable not set}
      - POSTGRES_SERVER=postgres_db
      - POSTGRES_PORT=5432 #${POSTGRES_PORT?Variable not set}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER?Variable not set}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD?Variable not set}
      - BACKEND_IP=${BACKEND_IP?Variable not set}
      - BACKEND_PORT=${BACKEND_PORT?Variable not set}

  adminer:
    image: adminer:latest
    container_name: adminer_users
    restart: always
    # ports:
    #   - "8080:8080"
    environment:
      - ADMINER_DESIGN=dracula
    networks:
      - my_network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.adminer.rule=Host(`adminer.localhost`)"
      - "traefik.http.services.adminer.loadbalancer.server.port=8080"

  backend:
    image: "${DOCKER_IMAGE_BACKEND?Variable not set}:${TAG-latest}"
    restart: always
    build:
      context: ./backend
    depends_on:
      postgres_db:
        condition: service_healthy
      prestart:
        condition: service_started
    networks:
      - my_network
    # ports:
    #   - "${BACKEND_PORT_MAPPED}:8000"
    env_file:
      - .env
    environment:
      - ENVIRONMENT=${ENVIRONMENT}
      - SECRET_KEY=${SECRET_KEY?Variable not set}
      - FIRST_SUPERUSER=${FIRST_SUPERUSER?Variable not set}
      - FIRST_SUPERUSER_PASSWORD=${FIRST_SUPERUSER_PASSWORD?Variable not set}
      - POSTGRES_SERVER=postgres_db
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER?Variable not set}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD?Variable not set}
      - BACKEND_IP=${BACKEND_IP?Variable not set}
      - BACKEND_PORT=${BACKEND_PORT?Variable not set}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend.rule=Host(`backend.localhost`)"
      - "traefik.http.services.backend.loadbalancer.server.port=8000"

networks:
  my_network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  portainer_data:
    driver: local

